// This file is auto-generated by @hey-api/openapi-ts

export interface Blueprint {
  id: number;
  name: string;
  producedInId: number;
  producedResources: ResourceAmount[];
  productionTime: TimeDuration;
  usedResources: ResourceAmount[];
}

export enum BuildingStatus {
  ConstructionStatus = 'Construction',
  ReadyStatus = 'Ready',
  ProductionStatus = 'Production',
  ResourcesNeededStatus = 'ResourcesNeeded',
  StorageNeededStatus = 'StorageNeeded'
}

export interface BuildingType {
  buildTime: TimeDuration;
  buildingGroup: string;
  buildingSubGroup: string;
  capacity: number;
  cost: number;
  description: string;
  id: number;
  requirements: string;
  title: string;
  workers: number;
}

export interface BuildingWithData {
  _id: string;
  buildingType: BuildingType;
  equipment?: Equipment[];
  equipmentEffect?: EquipmentEffect[];
  goods?: Goods[];
  hiringNeeds: number;
  level: number;
  logistics?: Logistics;
  nickName: string;
  onStrike: boolean;
  production?: Production;
  salary: number;
  square: number;
  squareInUse: number;
  status: BuildingStatus;
  typeId: number;
  userId: string;
  workEnd?: string;
  workStarted?: string;
  workers: number;
  x: number;
  y: number;
}

export interface BuyLandPayload {
  square: number;
  x: number;
  y: number;
}

export interface Cell {
  SpendRate: number;
  _id: string;
  averageSalary: number;
  cellName: string;
  civilSavings?: number;
  crime: number;
  education: number;
  medicine: number;
  pollution: number;
  population: number;
  square: number;
  surfaceImagePath: string;
  x: number;
  y: number;
}

export interface Characteristics {
  attention: number;
  intelligence: number;
  management: number;
  memory: number;
  multitasking: number;
  planning: number;
  wits: number;
}

export interface ConstructBuildingPayload {
  square: number;
  typeId: number;
  x: number;
  y: number;
}

export interface CreditTerms {
  limit: number;
  rate: number;
  rating: number;
}

export interface CreditTermsPayload {
  adding: boolean;
  buildingId: string;
  limit: number;
  rate: number;
  rating: number;
}

export interface Equipment {
  amount: number;
  durability: number;
  equipmentTypeId: number;
}

export interface EquipmentEffect {
  blueprintId: number;
  effectId: number;
  value: number;
  /**
   * Second value is considered as an average for all equipment, taking into account the first value.
   */
  valueSecond?: number;
}

export interface EquipmentType {
  blueprintIds?: number[];
  durability: number;
  effectId: number;
  id: number;
  name: string;
  resourceTypeId: number;
  square: number;
  value: number;
  valueSecond: number;
}

export interface ExecuteOrderPayload {
  amount?: number;
  orderId?: string;
}

export interface FindBuildingParams {
  buildingTypeId?: number;
  id?: string;
  limit?: number;
  nickName?: string;
  order?: string;
  orderField?: string;
  page?: number;
  userId?: string;
  x?: number;
  y?: number;
}

export interface Goods {
  price?: number;
  resourceTypeId: number;
  revenue?: number;
  sellStarted?: string;
  sellSum?: number;
  status?: StoreGoodsStatus;
}

export interface HiringPayload {
  buildingId?: string;
  hiringNeeds?: number;
  salary?: number;
}

export interface InstallEquipmentPayload {
  amount: number;
  buildingId: string;
  equipmentTypeId: number;
}

export interface JsonResult {
  code: number;
  data?: any;
  text?: string;
  values?: any;
}

export interface LandLord {
  _id: string;
  square: number;
  userId: string;
  x: number;
  y: number;
}

export interface LogisticPayload {
  amount?: number;
  buildingId?: string;
  fromX?: number;
  fromY?: number;
  resourceTypeId?: number;
  toX?: number;
  toY?: number;
}

export interface LogisticWithData {
  _id?: string;
  amount?: number;
  fromX?: number;
  fromY?: number;
  resourceType?: ResourceType;
  resourceTypeId?: number;
  toX?: number;
  toY?: number;
  userId?: string;
  workEnd?: string;
}

export interface Logistics {
  capacity: number;
  capacityMax: number;
  price: number;
  revenue: number;
  speed: number;
}

export interface LogisticsPriceParams {
  buildingId?: string;
  price?: number;
}

export interface LogisticsWithData {
  buildingId: string;
  capacity: number;
  price: number;
  speed: number;
  x: number;
  y: number;
}

export interface Order {
  _id: string;
  amount: number;
  priceForUnit: number;
  resourceTypeId: number;
  /**
   * true - sell; false - buy
   */
  sell: boolean;
  userId: string;
  x: number;
  y: number;
}

export interface OrderWithData {
  _id: string;
  amount: number;
  nickName: string;
  priceForUnit: number;
  resourceType: ResourceType;
  resourceTypeId: number;
  /**
   * true - sell; false - buy
   */
  sell: boolean;
  userId: string;
  x: number;
  y: number;
}

export interface Production {
  blueprintId: number;
}

export interface ResourceAmount {
  amount?: number;
  resourceId?: number;
}

export interface ResourceAsEquipment {
  _id: string;
  amount: number;
  equipmentType: EquipmentType;
  resourceType: ResourceType;
  resourceTypeId: number;
  userId: string;
  x: number;
  y: number;
}

export interface ResourceType {
  demand: number;
  id: number;
  name: string;
  storeGroup: string;
  /**
   * m3
   */
  volume: number;
  /**
   * kg
   */
  weight: number;
}

export interface ResourceWithData {
  _id: string;
  amount: number;
  resourceType: ResourceType;
  resourceTypeId: number;
  userId: string;
  x: number;
  y: number;
}

export interface StartProductionPayload {
  blueprintId: number;
  buildingId: string;
  duration: TimeDuration;
}

export interface Storage {
  _id: string;
  userId: string;
  volumeMax: number;
  volumeOccupied: number;
  x: number;
  y: number;
}

export interface StoreGoodsPayload {
  buildingId: string;
  price: number;
  resourceTypeId: number;
}

export enum StoreGoodsStatus {
  Selling = 'Selling',
  DemandSatisfied = 'DemandSatisfied',
  HighPrice = 'HighPrice',
  NotEnoughMinerals = 'NotEnoughMinerals',
  SpendingLimitReached = 'SpendingLimitReached',
  CapacityReached = 'CapacityReached',
  OnStrike = 'OnStrike'
}

export enum TimeDuration {
  minDuration = -9223372036854776000,
  maxDuration = 9223372036854776000,
  Nanosecond = 1,
  Microsecond = 1000,
  Millisecond = 1000000,
  Second = 1000000000,
  Minute = 60000000000,
  Hour = 3600000000000
}

export interface User {
  _id: string;
  characteristics?: Characteristics;
  email: string;
  money?: number;
  nickName: string;
  password: string;
}

export interface UserPayload {
  email: string;
  nickName: string;
  password: string;
  ttl: number;
}

export interface PostBankCreditTermsData {
  /**
   * Credit terms payload
   */
  body: CreditTermsPayload;
}

export type PostBankCreditTermsResponse = JsonResult

export type PostBankCreditTermsError = JsonResult

export interface GetBankGetCreditTermsData {
  query?: {
    /**
     * Credit limit minimum threshold
     */
    limit?: number;
    /**
     * Credit rate maximum threshold
     */
    rate?: number;
    /**
     * Credit rating maximum threshold
     */
    rating?: number;
  };
}

export type GetBankGetCreditTermsResponse = JsonResult & {
  data?: CreditTerms[];
}

export type GetBankGetCreditTermsError = JsonResult

export interface GetBuildingBlueprintsData {
  query?: {
    /**
     * Blueprint ID
     */
    id?: string;
  };
}

export type GetBuildingBlueprintsResponse = JsonResult & {
  data?: Blueprint[];
}

export type GetBuildingBlueprintsError = JsonResult

export interface PostBuildingConstructData {
  /**
   * Building construction payload
   */
  body: ConstructBuildingPayload;
}

export type PostBuildingConstructResponse = JsonResult & {
  values?: ConstructBuildingPayload;
}

export type PostBuildingConstructError = JsonResult

export interface DeleteBuildingDestroyData {
  query: {
    /**
     * Building ID
     */
    _id: string;
  };
}

export type DeleteBuildingDestroyResponse = JsonResult

export type DeleteBuildingDestroyError = JsonResult

export interface PostBuildingGetData {
  /**
   * Parameters to filter and sort buildings
   */
  body?: FindBuildingParams;
}

export type PostBuildingGetResponse = JsonResult & {
  values?: BuildingWithData[];
}

export type PostBuildingGetError = JsonResult

export interface PostBuildingHiringData {
  /**
   * Details of hiring
   */
  body: HiringPayload;
}

export type PostBuildingHiringResponse = JsonResult

export type PostBuildingHiringError = JsonResult

export interface PostBuildingInstallEquipmentData {
  /**
   * Equipment installation payload
   */
  body: InstallEquipmentPayload;
}

export type PostBuildingInstallEquipmentResponse = JsonResult

export type PostBuildingInstallEquipmentError = JsonResult

export interface GetBuildingMyData {
  query?: {
    /**
     * Building ID to filter by
     */
    _id?: string;
  };
}

export type GetBuildingMyResponse = JsonResult & {
  data?: BuildingWithData[];
}

export type GetBuildingMyError = JsonResult

export interface PostBuildingStartWorkData {
  /**
   * Start production payload
   */
  body: StartProductionPayload;
}

export type PostBuildingStartWorkResponse = JsonResult

export type PostBuildingStartWorkError = JsonResult

export interface PostBuildingStopWorkData {
  /**
   * Production stop payload
   */
  body: StartProductionPayload;
}

export type PostBuildingStopWorkResponse = JsonResult

export type PostBuildingStopWorkError = JsonResult

export type GetBuildingTypesResponse = JsonResult & {
  data?: BuildingType[];
}

export type GetBuildingTypesError = JsonResult

export interface GetUsernamesByPrefixData {
  query?: {
    /**
     * Prefix to filter usernames
     */
    prefix?: string;
  };
}

export type GetUsernamesByPrefixResponse = JsonResult

export type GetUsernamesByPrefixError = any

export interface GetEquipmentMyData {
  query?: {
    /**
     * x-coordinate of the equipment location
     */
    x?: number;
    /**
     * y-coordinate of the equipment location
     */
    y?: number;
  };
}

export type GetEquipmentMyResponse = JsonResult & {
  data?: ResourceAsEquipment[];
}

export type GetEquipmentMyError = JsonResult

export type GetEquipmentTypesResponse = JsonResult & {
  data?: EquipmentType[];
}

export type GetEquipmentTypesError = JsonResult

export interface PostLogisticsSetPriceData {
  /**
   * Logistics price parameters
   */
  body: LogisticsPriceParams;
}

export type PostLogisticsSetPriceResponse = JsonResult

export type PostLogisticsSetPriceError = JsonResult

export type GetMapResponse = JsonResult & {
  data?: Cell[];
}

export type GetMapError = JsonResult

export type GetMapAllLandLordsResponse = JsonResult & {
  data?: LandLord[];
}

export type GetMapAllLandLordsError = JsonResult

export interface PostMapBuyLandData {
  /**
   * Land purchase payload
   */
  body: BuyLandPayload;
}

export type PostMapBuyLandResponse = JsonResult & {
  values?: BuyLandPayload;
}

export type PostMapBuyLandError = JsonResult

export interface GetMapCellOwnersData {
  query: {
    /**
     * X coordinate
     */
    x: number;
    /**
     * Y coordinate
     */
    y: number;
  };
}

export type GetMapCellOwnersResponse = JsonResult & {
  data?: LandLord[];
}

export type GetMapCellOwnersError = JsonResult

export type GetMapMyResponse = JsonResult & {
  data?: LandLord[];
}

export type GetMapMyError = JsonResult

export interface DeleteMarketOrderCloseData {
  query: {
    /**
     * Order ID
     */
    orderId: string;
  };
}

export type DeleteMarketOrderCloseResponse = JsonResult

export type DeleteMarketOrderCloseError = JsonResult

export interface PostMarketOrderCreateData {
  /**
   * Order payload
   */
  body: Order;
}

export type PostMarketOrderCreateResponse = JsonResult

export type PostMarketOrderCreateError = JsonResult

export interface PostMarketOrderExecuteData {
  /**
   * Order execution payload
   */
  body: ExecuteOrderPayload;
}

export type PostMarketOrderExecuteResponse = JsonResult

export type PostMarketOrderExecuteError = JsonResult

export type GetMarketOrderMyResponse = JsonResult & {
  data?: OrderWithData[];
}

export type GetMarketOrderMyError = JsonResult

export interface GetOrdersData {
  query?: {
    /**
     * Order ID
     */
    id?: string;
    /**
     * Limit number of orders
     */
    limit?: number;
    /**
     * Order
     */
    order?: number;
    /**
     * Order Field
     */
    orderField?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * Resource Type ID
     */
    resourceTypeId?: number;
    /**
     * Sell flag
     */
    sell?: boolean;
    /**
     * User ID
     */
    userId?: string;
    /**
     * X coordinate
     */
    x?: number;
    /**
     * Y coordinate
     */
    y?: number;
  };
}

export type GetOrdersResponse = JsonResult & {
  data?: OrderWithData[];
}

export type GetOrdersError = JsonResult

export interface GetResourceLogisticsData {
  query?: {
    /**
     * Minimum capacity
     */
    minCapacity?: number;
    /**
     * x
     */
    x?: number;
    /**
     * y
     */
    y?: number;
  };
}

export type GetResourceLogisticsResponse = JsonResult & {
  data?: LogisticsWithData[];
}

export type GetResourceLogisticsError = JsonResult

export interface PostResourceMoveData {
  /**
   * Resource movement payload
   */
  body: LogisticPayload;
}

export type PostResourceMoveResponse = JsonResult

export type PostResourceMoveError = JsonResult

export interface GetResourceMyData {
  query?: {
    /**
     * X coordinate
     */
    x?: number;
    /**
     * Y coordinate
     */
    y?: number;
  };
}

export type GetResourceMyResponse = JsonResult & {
  data?: ResourceWithData[];
}

export type GetResourceMyError = JsonResult

export type GetResourceMyLogisticsResponse = JsonResult & {
  data?: LogisticWithData[];
}

export type GetResourceMyLogisticsError = JsonResult

export type GetResourceTypesResponse = JsonResult & {
  data?: ResourceType[];
}

export type GetResourceTypesError = JsonResult

export type GetSettingsResponse = JsonResult

export type GetSettingsError = JsonResult

export type GetStorageMyResponse = JsonResult & {
  data?: Storage[];
}

export type GetStorageMyError = JsonResult

export interface PostStoreGoodsSetData {
  /**
   * Store goods payload
   */
  body: StoreGoodsPayload;
}

export type PostStoreGoodsSetResponse = JsonResult

export type PostStoreGoodsSetError = JsonResult

export interface PostUserCreateData {
  /**
   * User creation payload
   */
  body: UserPayload;
}

export type PostUserCreateResponse = JsonResult & {
  values?: UserPayload;
}

export type PostUserCreateError = JsonResult

export type GetUserDataResponse = JsonResult & {
  data?: User;
}

export type GetUserDataError = JsonResult

export interface PostUserLoginData {
  /**
   * User login payload
   */
  body: UserPayload;
}

export type PostUserLoginResponse = JsonResult

export type PostUserLoginError = any

export type DeleteUserLoginResponse = JsonResult

export type DeleteUserLoginError = JsonResult
