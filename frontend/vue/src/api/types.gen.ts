// This file is auto-generated by @hey-api/openapi-ts

export type Bank = {
    borrowedFromState: number;
    borrowedLimit: number;
    loansAmount: number;
    loansAmountNewUsers: number;
    loansLimit: number;
};

export type Blueprint = {
    id: number;
    name: string;
    producedInId: number;
    producedResources: Array<ResourceAmount>;
    productionTime: TimeDuration;
    usedResources: Array<ResourceAmount>;
};

export enum BuildingStatus {
    ConstructionStatus = 'Construction',
    ReadyStatus = 'Ready',
    ProductionStatus = 'Production',
    ResourcesNeededStatus = 'ResourcesNeeded',
    StorageNeededStatus = 'StorageNeeded'
}

export type BuildingType = {
    buildTime: TimeDuration;
    buildingGroup: string;
    buildingSubGroup: string;
    capacity: number;
    cost: number;
    description: string;
    id: number;
    requirements: string;
    title: string;
    workers: number;
};

export type BuildingWithData = {
    _id: string;
    bank?: Bank;
    buildingType: BuildingType;
    equipment?: Array<Equipment>;
    equipmentEffect?: Array<EquipmentEffect>;
    goods?: Array<Goods>;
    hiringNeeds: number;
    level: number;
    logistics?: Logistics;
    nickName: string;
    onStrike: boolean;
    production?: Production;
    salary: number;
    square: number;
    squareInUse: number;
    status: BuildingStatus;
    typeId: number;
    userId: string;
    workEnd?: string;
    workStarted?: string;
    workers: number;
    x: number;
    y: number;
};

export type BuyLandPayload = {
    square: number;
    x: number;
    y: number;
};

export type Cell = {
    SpendRate: number;
    _id: string;
    averageSalary: number;
    cellName: string;
    civilSavings?: number;
    crime: number;
    education: number;
    medicine: number;
    pollution: number;
    population: number;
    square: number;
    surfaceImagePath: string;
    x: number;
    y: number;
};

export type Characteristics = {
    attention: number;
    intelligence: number;
    management: number;
    memory: number;
    multitasking: number;
    planning: number;
    wits: number;
};

export type ConstructBuildingPayload = {
    square: number;
    typeId: number;
    x: number;
    y: number;
};

export type CreditTermsPayload = {
    adding: boolean;
    buildingId: string;
    limit: number;
    rate: number;
    rating: number;
};

export type CreditTermsWithData = {
    buildingId: string;
    limit: number;
    rate: number;
    rating: number;
};

export type EmergencyHiringPayload = {
    buildingId: string;
};

export type Equipment = {
    amount: number;
    durability: number;
    equipmentTypeId: number;
};

export type EquipmentEffect = {
    blueprintId: number;
    effectId: number;
    value: number;
    /**
     * Second value is considered as an average for all equipment, taking into account the first value.
     */
    valueSecond?: number;
};

export type EquipmentType = {
    blueprintIds?: Array<(number)>;
    durability: number;
    effectId: number;
    id: number;
    name: string;
    resourceTypeId: number;
    square: number;
    value: number;
    valueSecond: number;
};

export type ExecuteOrderPayload = {
    amount?: number;
    orderId?: string;
};

export type FindBuildingParams = {
    buildingTypeId?: number;
    id?: string;
    limit?: number;
    nickName?: string;
    order?: string;
    orderField?: string;
    page?: number;
    userId?: string;
    x?: number;
    y?: number;
};

export type Goods = {
    price?: number;
    resourceTypeId: number;
    revenue?: number;
    sellStarted?: string;
    sellSum?: number;
    status?: StoreGoodsStatus;
};

export type HiringPayload = {
    buildingId?: string;
    hiringNeeds?: number;
    salary?: number;
};

export type InstallEquipmentPayload = {
    amount: number;
    buildingId: string;
    equipmentTypeId: number;
};

export type JsonResult = {
    code: number;
    data?: unknown;
    text?: string;
    values?: unknown;
};

export type LandLord = {
    _id: string;
    square: number;
    userId: string;
    x: number;
    y: number;
};

export type LogisticPayload = {
    amount?: number;
    buildingId?: string;
    fromX?: number;
    fromY?: number;
    resourceTypeId?: number;
    toX?: number;
    toY?: number;
};

export type LogisticWithData = {
    _id?: string;
    amount?: number;
    fromX?: number;
    fromY?: number;
    resourceType?: ResourceType;
    resourceTypeId?: number;
    toX?: number;
    toY?: number;
    userId?: string;
    workEnd?: string;
};

export type Logistics = {
    capacity: number;
    capacityMax: number;
    price: number;
    revenue: number;
    speed: number;
};

export type LogisticsPriceParams = {
    buildingId?: string;
    price?: number;
};

export type LogisticsWithData = {
    buildingId: string;
    capacity: number;
    price: number;
    speed: number;
    x: number;
    y: number;
};

export type Order = {
    _id: string;
    amount: number;
    priceForUnit: number;
    resourceTypeId: number;
    /**
     * true - sell; false - buy
     */
    sell: boolean;
    userId: string;
    x: number;
    y: number;
};

export type OrderWithData = {
    _id: string;
    amount: number;
    nickName: string;
    priceForUnit: number;
    resourceType: ResourceType;
    resourceTypeId: number;
    /**
     * true - sell; false - buy
     */
    sell: boolean;
    userId: string;
    x: number;
    y: number;
};

export type Production = {
    blueprintId: number;
};

export type RepayLoanPayload = {
    amount: number;
    loanId: string;
};

export type ResourceAmount = {
    amount?: number;
    resourceId?: number;
};

export type ResourceAsEquipment = {
    _id: string;
    amount: number;
    equipmentType: EquipmentType;
    resourceType: ResourceType;
    resourceTypeId: number;
    userId: string;
    x: number;
    y: number;
};

export type ResourceType = {
    demand: number;
    id: number;
    name: string;
    storeGroup: string;
    /**
     * m3
     */
    volume: number;
    /**
     * kg
     */
    weight: number;
};

export type ResourceWithData = {
    _id: string;
    amount: number;
    resourceType: ResourceType;
    resourceTypeId: number;
    userId: string;
    x: number;
    y: number;
};

export type StartProductionPayload = {
    blueprintId: number;
    buildingId: string;
    duration: TimeDuration;
};

export type Storage = {
    _id: string;
    userId: string;
    volumeMax: number;
    volumeOccupied: number;
    x: number;
    y: number;
};

export type StoreGoodsPayload = {
    buildingId: string;
    price: number;
    resourceTypeId: number;
};

export enum StoreGoodsStatus {
    Selling = 'Selling',
    DemandSatisfied = 'DemandSatisfied',
    HighPrice = 'HighPrice',
    NotEnoughMinerals = 'NotEnoughMinerals',
    SpendingLimitReached = 'SpendingLimitReached',
    CapacityReached = 'CapacityReached',
    OnStrike = 'OnStrike'
}

export type TakeCreditPayload = {
    amount: number;
    buildingId: string;
    rate: number;
    rating: number;
};

export type TakeStateCreditPayload = {
    amount: number;
    buildingId: string;
};

export enum TimeDuration {
    minDuration = -9223372036854776000,
    maxDuration = 9223372036854776000,
    Nanosecond = 1,
    Microsecond = 1000,
    Millisecond = 1000000,
    Second = 1000000000,
    Minute = 60000000000,
    Hour = 3600000000000
}

export type User = {
    _id: string;
    characteristics?: Characteristics;
    created?: string;
    creditRating?: number;
    email: string;
    money?: number;
    nickName: string;
    password: string;
};

export type UserPayload = {
    email: string;
    nickName: string;
    password: string;
    ttl: number;
};

export type PostBankCreditTermsData = {
    /**
     * Credit terms payload
     */
    body: CreditTermsPayload;
};

export type PostBankCreditTermsResponse = (JsonResult);

export type PostBankCreditTermsError = (JsonResult);

export type DeleteBankDeleteLoanData = {
    query: {
        /**
         * Loan ID
         */
        _id: string;
    };
};

export type DeleteBankDeleteLoanResponse = (JsonResult);

export type DeleteBankDeleteLoanError = (JsonResult);

export type GetBankGetCreditTermsData = {
    query?: {
        /**
         * Credit limit minimum threshold
         */
        limit?: number;
        /**
         * Credit rate maximum threshold
         */
        rate?: number;
        /**
         * Credit rating maximum threshold
         */
        rating?: number;
    };
};

export type GetBankGetCreditTermsResponse = ((JsonResult & {
    data?: Array<CreditTermsWithData>;
}));

export type GetBankGetCreditTermsError = (JsonResult);

export type GetBankGetLoansResponse = (JsonResult);

export type GetBankGetLoansError = (JsonResult);

export type PostBankRepayLoanData = {
    /**
     * Repay loan payload
     */
    body: RepayLoanPayload;
};

export type PostBankRepayLoanResponse = (JsonResult);

export type PostBankRepayLoanError = (JsonResult);

export type PostBankTakeCreditData = {
    /**
     * Get credit payload
     */
    body: TakeCreditPayload;
};

export type PostBankTakeCreditResponse = (JsonResult);

export type PostBankTakeCreditError = (JsonResult);

export type PostBankTakeStateCreditData = {
    /**
     * Get state credit payload
     */
    body: TakeStateCreditPayload;
};

export type PostBankTakeStateCreditResponse = (JsonResult);

export type PostBankTakeStateCreditError = (JsonResult);

export type GetBuildingBlueprintsData = {
    query?: {
        /**
         * Blueprint ID
         */
        id?: string;
    };
};

export type GetBuildingBlueprintsResponse = ((JsonResult & {
    data?: Array<Blueprint>;
}));

export type GetBuildingBlueprintsError = (JsonResult);

export type PostBuildingConstructData = {
    /**
     * Building construction payload
     */
    body: ConstructBuildingPayload;
};

export type PostBuildingConstructResponse = ((JsonResult & {
    values?: ConstructBuildingPayload;
}));

export type PostBuildingConstructError = (JsonResult);

export type DeleteBuildingDestroyData = {
    query: {
        /**
         * Building ID
         */
        _id: string;
    };
};

export type DeleteBuildingDestroyResponse = (JsonResult);

export type DeleteBuildingDestroyError = (JsonResult);

export type PostBuildingEmergencyHiringData = {
    /**
     * Emergency hiring payload
     */
    body: EmergencyHiringPayload;
};

export type PostBuildingEmergencyHiringResponse = (JsonResult);

export type PostBuildingEmergencyHiringError = (JsonResult);

export type PostBuildingGetData = {
    /**
     * Parameters to filter and sort buildings
     */
    body?: FindBuildingParams;
};

export type PostBuildingGetResponse = ((JsonResult & {
    values?: Array<BuildingWithData>;
}));

export type PostBuildingGetError = (JsonResult);

export type PostBuildingHiringData = {
    /**
     * Details of hiring
     */
    body: HiringPayload;
};

export type PostBuildingHiringResponse = (JsonResult);

export type PostBuildingHiringError = (JsonResult);

export type PostBuildingInstallEquipmentData = {
    /**
     * Equipment installation payload
     */
    body: InstallEquipmentPayload;
};

export type PostBuildingInstallEquipmentResponse = (JsonResult);

export type PostBuildingInstallEquipmentError = (JsonResult);

export type GetBuildingMyData = {
    query?: {
        /**
         * Building ID to filter by
         */
        _id?: string;
    };
};

export type GetBuildingMyResponse = ((JsonResult & {
    data?: Array<BuildingWithData>;
}));

export type GetBuildingMyError = (JsonResult);

export type PostBuildingStartWorkData = {
    /**
     * Start production payload
     */
    body: StartProductionPayload;
};

export type PostBuildingStartWorkResponse = (JsonResult);

export type PostBuildingStartWorkError = (JsonResult);

export type PostBuildingStopWorkData = {
    /**
     * Production stop payload
     */
    body: StartProductionPayload;
};

export type PostBuildingStopWorkResponse = (JsonResult);

export type PostBuildingStopWorkError = (JsonResult);

export type GetBuildingTypesResponse = ((JsonResult & {
    data?: Array<BuildingType>;
}));

export type GetBuildingTypesError = (JsonResult);

export type GetUsernamesByPrefixData = {
    query?: {
        /**
         * Prefix to filter usernames
         */
        prefix?: string;
    };
};

export type GetUsernamesByPrefixResponse = (JsonResult);

export type GetUsernamesByPrefixError = unknown;

export type GetEquipmentMyData = {
    query?: {
        /**
         * x-coordinate of the equipment location
         */
        x?: number;
        /**
         * y-coordinate of the equipment location
         */
        y?: number;
    };
};

export type GetEquipmentMyResponse = ((JsonResult & {
    data?: Array<ResourceAsEquipment>;
}));

export type GetEquipmentMyError = (JsonResult);

export type GetEquipmentTypesResponse = ((JsonResult & {
    data?: Array<EquipmentType>;
}));

export type GetEquipmentTypesError = (JsonResult);

export type PostLogisticsSetPriceData = {
    /**
     * Logistics price parameters
     */
    body: LogisticsPriceParams;
};

export type PostLogisticsSetPriceResponse = (JsonResult);

export type PostLogisticsSetPriceError = (JsonResult);

export type GetMapResponse = ((JsonResult & {
    data?: Array<Cell>;
}));

export type GetMapError = (JsonResult);

export type GetMapAllLandLordsResponse = ((JsonResult & {
    data?: Array<LandLord>;
}));

export type GetMapAllLandLordsError = (JsonResult);

export type PostMapBuyLandData = {
    /**
     * Land purchase payload
     */
    body: BuyLandPayload;
};

export type PostMapBuyLandResponse = ((JsonResult & {
    values?: BuyLandPayload;
}));

export type PostMapBuyLandError = (JsonResult);

export type GetMapCellOwnersData = {
    query: {
        /**
         * X coordinate
         */
        x: number;
        /**
         * Y coordinate
         */
        y: number;
    };
};

export type GetMapCellOwnersResponse = ((JsonResult & {
    data?: Array<LandLord>;
}));

export type GetMapCellOwnersError = (JsonResult);

export type GetMapMyResponse = ((JsonResult & {
    data?: Array<LandLord>;
}));

export type GetMapMyError = (JsonResult);

export type DeleteMarketOrderCloseData = {
    query: {
        /**
         * Order ID
         */
        orderId: string;
    };
};

export type DeleteMarketOrderCloseResponse = (JsonResult);

export type DeleteMarketOrderCloseError = (JsonResult);

export type PostMarketOrderCreateData = {
    /**
     * Order payload
     */
    body: Order;
};

export type PostMarketOrderCreateResponse = (JsonResult);

export type PostMarketOrderCreateError = (JsonResult);

export type PostMarketOrderExecuteData = {
    /**
     * Order execution payload
     */
    body: ExecuteOrderPayload;
};

export type PostMarketOrderExecuteResponse = (JsonResult);

export type PostMarketOrderExecuteError = (JsonResult);

export type GetMarketOrderMyResponse = ((JsonResult & {
    data?: Array<OrderWithData>;
}));

export type GetMarketOrderMyError = (JsonResult);

export type GetOrdersData = {
    query?: {
        /**
         * Order ID
         */
        id?: string;
        /**
         * Limit number of orders
         */
        limit?: number;
        /**
         * Order
         */
        order?: number;
        /**
         * Order Field
         */
        orderField?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Resource Type ID
         */
        resourceTypeId?: number;
        /**
         * Sell flag
         */
        sell?: boolean;
        /**
         * User ID
         */
        userId?: string;
        /**
         * X coordinate
         */
        x?: number;
        /**
         * Y coordinate
         */
        y?: number;
    };
};

export type GetOrdersResponse = ((JsonResult & {
    data?: Array<OrderWithData>;
}));

export type GetOrdersError = (JsonResult);

export type GetResourceLogisticsData = {
    query?: {
        /**
         * Minimum capacity
         */
        minCapacity?: number;
        /**
         * x
         */
        x?: number;
        /**
         * y
         */
        y?: number;
    };
};

export type GetResourceLogisticsResponse = ((JsonResult & {
    data?: Array<LogisticsWithData>;
}));

export type GetResourceLogisticsError = (JsonResult);

export type PostResourceMoveData = {
    /**
     * Resource movement payload
     */
    body: LogisticPayload;
};

export type PostResourceMoveResponse = (JsonResult);

export type PostResourceMoveError = (JsonResult);

export type GetResourceMyData = {
    query?: {
        /**
         * X coordinate
         */
        x?: number;
        /**
         * Y coordinate
         */
        y?: number;
    };
};

export type GetResourceMyResponse = ((JsonResult & {
    data?: Array<ResourceWithData>;
}));

export type GetResourceMyError = (JsonResult);

export type GetResourceMyLogisticsResponse = ((JsonResult & {
    data?: Array<LogisticWithData>;
}));

export type GetResourceMyLogisticsError = (JsonResult);

export type GetResourceTypesResponse = ((JsonResult & {
    data?: Array<ResourceType>;
}));

export type GetResourceTypesError = (JsonResult);

export type GetSettingsResponse = (JsonResult);

export type GetSettingsError = (JsonResult);

export type GetStorageMyResponse = ((JsonResult & {
    data?: Array<Storage>;
}));

export type GetStorageMyError = (JsonResult);

export type PostStoreGoodsSetData = {
    /**
     * Store goods payload
     */
    body: StoreGoodsPayload;
};

export type PostStoreGoodsSetResponse = (JsonResult);

export type PostStoreGoodsSetError = (JsonResult);

export type PostUserCreateData = {
    /**
     * User creation payload
     */
    body: UserPayload;
};

export type PostUserCreateResponse = ((JsonResult & {
    values?: UserPayload;
}));

export type PostUserCreateError = (JsonResult);

export type GetUserDataResponse = ((JsonResult & {
    data?: User;
}));

export type GetUserDataError = (JsonResult);

export type PostUserLoginData = {
    /**
     * User login payload
     */
    body: UserPayload;
};

export type PostUserLoginResponse = (JsonResult);

export type PostUserLoginError = unknown;

export type DeleteUserLoginResponse = (JsonResult);

export type DeleteUserLoginError = (JsonResult);