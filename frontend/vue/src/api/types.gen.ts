// This file is auto-generated by @hey-api/openapi-ts

export interface blueprint {
    id?: number;
    name?: string;
    producedInId?: number;
    producedResources?: resourceAmount[];
    productionTime?: time_Duration;
    usedResources?: resourceAmount[];
}

export enum buildingStatus {
    ConstructionStatus = 'Construction',
    ReadyStatus = 'Ready',
    ProductionStatus = 'Production',
    ResourcesNeededStatus = 'ResourcesNeeded',
    StorageNeededStatus = 'StorageNeeded'
}

export interface buildingType {
  buildTime?: time_Duration;
  buildingGroup?: string;
  buildingSubGroup?: string;
  capacity?: number;
  cost?: number;
  description?: string;
  id?: number;
  requirements?: string;
  title?: string;
  workers?: number;
}

export interface buildingWithData {
    _id?: string;
    buildingType?: buildingType;
    equipment?: equipment[];
    equipmentEffect?: equipmentEffect[];
    goods?: goods[];
    hiringNeeds?: number;
    level?: number;
    logistics?: logistics;
    nickName?: string;
    onStrike?: boolean;
    production?: production;
    salary?: number;
  square?: number;
    squareInUse?: number;
    status?: buildingStatus;
  typeId?: number;
    userId?: string;
    workEnd?: string;
    workStarted?: string;
    workers?: number;
    x?: number;
    y?: number;
}

export interface buyLandPayload {
    square?: number;
    x?: number;
    y?: number;
}

export interface cell {
    SpendRate?: number;
    _id?: string;
    averageSalary?: number;
    cellName?: string;
    civilSavings?: number;
    crime?: number;
    education?: number;
    medicine?: number;
    pollution?: number;
    population?: number;
    square?: number;
    surfaceImagePath?: string;
    x?: number;
    y?: number;
}

export interface characteristics {
    attention?: number;
    intelligence?: number;
    management?: number;
    memory?: number;
    multitasking?: number;
    planning?: number;
    wits?: number;
}

export interface constructBuildingPayload {
    square?: number;
    typeId?: number;
    x?: number;
    y?: number;
}

export interface equipment {
    amount?: number;
    durability?: number;
    equipmentTypeId?: number;
}

export interface equipmentEffect {
    blueprintId?: number;
    effectId?: number;
    value?: number;
    /**
     * Second value is considered as an average for all equipment, taking into account the first value.
     */
    valueSecond?: number;
}

export interface equipmentType {
    blueprintIds?: number[];
    durability?: number;
    effectId?: number;
    id?: number;
    name?: string;
    resourceTypeId?: number;
    square?: number;
    value?: number;
    valueSecond?: number;
}

export interface executeOrderPayload {
    amount?: number;
    orderId?: string;
}

export interface findBuildingParams {
    buildingTypeId?: number;
    id?: string;
    limit?: number;
    nickName?: string;
    order?: string;
    orderField?: string;
    page?: number;
    userId?: string;
    x?: number;
    y?: number;
}

export interface goods {
    price?: number;
    resourceTypeId?: number;
    revenue?: number;
    sellStarted?: string;
    sellSum?: number;
    status?: storeGoodsStatus;
}

export interface hiringPayload {
    buildingId?: string;
    hiringNeeds?: number;
    salary?: number;
}

export interface installEquipmentPayload {
    amount?: number;
    buildingId?: string;
    equipmentTypeId?: number;
}

export interface jsonResult {
    code?: number;
    data?: unknown;
    text?: string;
    values?: unknown;
}

export interface landLord {
    _id?: string;
    square?: number;
    userId?: string;
  x?: number;
  y?: number;
}

export interface logisticPayload {
    amount?: number;
    buildingId?: string;
    fromX?: number;
    fromY?: number;
    resourceTypeId?: number;
    toX?: number;
    toY?: number;
}

export interface logisticWithData {
    _id?: string;
    amount?: number;
    fromX?: number;
    fromY?: number;
    resourceType?: resourceType;
    resourceTypeId?: number;
    toX?: number;
    toY?: number;
    userId?: string;
    workEnd?: string;
}

export interface logistics {
    capacity?: number;
    capacityMax?: number;
    price?: number;
    revenue?: number;
    speed?: number;
}

export interface logisticsPriceParams {
    buildingId?: string;
    price?: number;
}

export interface logisticsWithData {
    buildingId?: string;
    capacity?: number;
    price?: number;
    speed?: number;
    x?: number;
    y?: number;
}

export interface order {
    _id?: string;
    amount?: number;
    priceForUnit?: number;
    resourceTypeId?: number;
    /**
     * true - sell; false - buy
     */
    sell?: boolean;
    userId?: string;
    x?: number;
    y?: number;
}

export interface orderWithData {
    _id?: string;
    amount?: number;
    nickName?: string;
    priceForUnit?: number;
    resourceType?: resourceType;
    resourceTypeId?: number;
    /**
     * true - sell; false - buy
     */
    sell?: boolean;
    userId?: string;
    x?: number;
    y?: number;
}

export interface production {
    blueprintId?: number;
}

export interface resourceAmount {
    amount?: number;
    resourceId?: number;
}

export interface resourceAsEquipment {
    _id?: string;
    amount?: number;
    equipmentType?: equipmentType;
    resourceType?: resourceType;
    resourceTypeId?: number;
    userId?: string;
    x?: number;
    y?: number;
}

export interface resourceType {
    demand?: number;
    id?: number;
    name?: string;
    storeGroup?: string;
    /**
     * m3
     */
    volume?: number;
    /**
     * kg
     */
    weight?: number;
}

export interface resourceWithData {
    _id?: string;
    amount?: number;
    resourceType?: resourceType;
    resourceTypeId?: number;
    userId?: string;
    x?: number;
    y?: number;
}

export interface startProductionPayload {
    blueprintId?: number;
    buildingId?: string;
    duration?: time_Duration;
}

export interface storage {
    _id?: string;
    userId?: string;
    volumeMax?: number;
    volumeOccupied?: number;
    x?: number;
    y?: number;
}

export interface storeGoodsPayload {
    buildingId?: string;
    price?: number;
    resourceTypeId?: number;
}

export enum storeGoodsStatus {
    Selling = 'Selling',
    DemandSatisfied = 'DemandSatisfied',
    HighPrice = 'HighPrice',
    NotEnoughMinerals = 'NotEnoughMinerals',
    SpendingLimitReached = 'SpendingLimitReached',
    CapacityReached = 'CapacityReached',
    OnStrike = 'OnStrike'
}

export enum time_Duration {
  minDuration = -9223372036854776000,
  maxDuration = 9223372036854776000,
  Nanosecond = 1,
  Microsecond = 1000,
  Millisecond = 1000000,
  Second = 1000000000,
  Minute = 60000000000,
  Hour = 3600000000000
}

export interface user {
    _id?: string;
    characteristics?: characteristics;
    email?: string;
    money?: number;
    nickName?: string;
    password?: string;
}

export interface userPayload {
    email?: string;
    nickName?: string;
    password?: string;
    ttl?: number;
}

export interface GetBuildingBlueprintsData {
    query?: {
        /**
         * Blueprint ID
         */
        id?: string;
    };
}

export type GetBuildingBlueprintsResponse = jsonResult & {
    data?: blueprint[];
}

export type GetBuildingBlueprintsError = jsonResult

export interface PostBuildingConstructData {
  /**
   * Building construction payload
   */
  body: constructBuildingPayload;
}

export type PostBuildingConstructResponse = jsonResult & {
    values?: constructBuildingPayload;
}

export type PostBuildingConstructError = jsonResult

export interface DeleteBuildingDestroyData {
    query: {
        /**
         * Building ID
         */
        _id: string;
    };
}

export type DeleteBuildingDestroyResponse = jsonResult

export type DeleteBuildingDestroyError = jsonResult

export interface PostBuildingGetData {
    /**
     * Parameters to filter and sort buildings
     */
    body?: findBuildingParams;
}

export type PostBuildingGetResponse = jsonResult & {
    values?: buildingWithData[];
}

export type PostBuildingGetError = jsonResult

export interface PostBuildingHiringData {
    /**
     * Details of hiring
     */
    body: hiringPayload;
}

export type PostBuildingHiringResponse = jsonResult

export type PostBuildingHiringError = jsonResult

export interface PostBuildingInstallEquipmentData {
    /**
     * Equipment installation payload
     */
    body: installEquipmentPayload;
}

export type PostBuildingInstallEquipmentResponse = jsonResult

export type PostBuildingInstallEquipmentError = jsonResult

export interface GetBuildingMyData {
    query?: {
        /**
         * Building ID to filter by
         */
        _id?: string;
    };
}

export type GetBuildingMyResponse = jsonResult & {
    data?: buildingWithData[];
}

export type GetBuildingMyError = jsonResult

export interface PostBuildingStartWorkData {
    /**
     * Start production payload
     */
    body: startProductionPayload;
}

export type PostBuildingStartWorkResponse = jsonResult

export type PostBuildingStartWorkError = jsonResult

export interface PostBuildingStopWorkData {
    /**
     * Production stop payload
     */
    body: startProductionPayload;
}

export type PostBuildingStopWorkResponse = jsonResult

export type PostBuildingStopWorkError = jsonResult

export type GetBuildingTypesResponse = jsonResult & {
    data?: buildingType[];
}

export type GetBuildingTypesError = jsonResult

export interface GetUsernamesByPrefixData {
    query?: {
        /**
         * Prefix to filter usernames
         */
        prefix?: string;
    };
}

export type GetUsernamesByPrefixResponse = jsonResult

export type GetUsernamesByPrefixError = unknown

export interface GetEquipmentMyData {
    query?: {
        /**
         * x-coordinate of the equipment location
         */
        x?: number;
        /**
         * y-coordinate of the equipment location
         */
        y?: number;
    };
}

export type GetEquipmentMyResponse = jsonResult & {
    data?: resourceAsEquipment[];
}

export type GetEquipmentMyError = jsonResult

export type GetEquipmentTypesResponse = jsonResult & {
    data?: equipmentType[];
}

export type GetEquipmentTypesError = jsonResult

export interface PostLogisticsSetPriceData {
    /**
     * Logistics price parameters
     */
    body: logisticsPriceParams;
}

export type PostLogisticsSetPriceResponse = jsonResult

export type PostLogisticsSetPriceError = jsonResult

export type GetMapResponse = jsonResult & {
    data?: cell[];
}

export type GetMapError = jsonResult

export type GetMapAllLandLordsResponse = jsonResult & {
    data?: landLord[];
}

export type GetMapAllLandLordsError = jsonResult

export interface PostMapBuyLandData {
    /**
     * Land purchase payload
     */
    body: buyLandPayload;
}

export type PostMapBuyLandResponse = jsonResult & {
    values?: buyLandPayload;
}

export type PostMapBuyLandError = jsonResult

export interface GetMapCellOwnersData {
    query: {
        /**
         * X coordinate
         */
        x: number;
        /**
         * Y coordinate
         */
        y: number;
    };
}

export type GetMapCellOwnersResponse = jsonResult & {
    data?: landLord[];
}

export type GetMapCellOwnersError = jsonResult

export type GetMapMyResponse = jsonResult & {
    data?: landLord[];
}

export type GetMapMyError = jsonResult

export interface DeleteMarketOrderCloseData {
    query: {
        /**
         * Order ID
         */
        orderId: string;
    };
}

export type DeleteMarketOrderCloseResponse = jsonResult

export type DeleteMarketOrderCloseError = jsonResult

export interface PostMarketOrderCreateData {
    /**
     * Order payload
     */
    body: order;
}

export type PostMarketOrderCreateResponse = jsonResult

export type PostMarketOrderCreateError = jsonResult

export interface PostMarketOrderExecuteData {
    /**
     * Order execution payload
     */
    body: executeOrderPayload;
}

export type PostMarketOrderExecuteResponse = jsonResult

export type PostMarketOrderExecuteError = jsonResult

export type GetMarketOrderMyResponse = jsonResult & {
    data?: orderWithData[];
}

export type GetMarketOrderMyError = jsonResult

export interface GetOrdersData {
    query?: {
        /**
         * Order ID
         */
        id?: string;
        /**
         * Limit number of orders
         */
        limit?: number;
        /**
         * Order
         */
        order?: number;
        /**
         * Order Field
         */
        orderField?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Resource Type ID
         */
        resourceTypeId?: number;
        /**
         * Sell flag
         */
        sell?: boolean;
        /**
         * User ID
         */
        userId?: string;
        /**
         * X coordinate
         */
        x?: number;
        /**
         * Y coordinate
         */
        y?: number;
    };
}

export type GetOrdersResponse = jsonResult & {
    data?: orderWithData[];
}

export type GetOrdersError = jsonResult

export interface GetResourceLogisticsData {
    query?: {
        /**
         * Minimum capacity
         */
        minCapacity?: number;
        /**
         * x
         */
        x?: number;
        /**
         * y
         */
        y?: number;
    };
}

export type GetResourceLogisticsResponse = jsonResult & {
    data?: logisticsWithData[];
}

export type GetResourceLogisticsError = jsonResult

export interface PostResourceMoveData {
    /**
     * Resource movement payload
     */
    body: logisticPayload;
}

export type PostResourceMoveResponse = jsonResult

export type PostResourceMoveError = jsonResult

export interface GetResourceMyData {
    query?: {
        /**
         * X coordinate
         */
        x?: number;
        /**
         * Y coordinate
         */
        y?: number;
    };
}

export type GetResourceMyResponse = jsonResult & {
    data?: resourceWithData[];
}

export type GetResourceMyError = jsonResult

export type GetResourceMyLogisticsResponse = jsonResult & {
    data?: logisticWithData[];
}

export type GetResourceMyLogisticsError = jsonResult

export type GetResourceTypesResponse = jsonResult & {
    data?: resourceType[];
}

export type GetResourceTypesError = jsonResult

export type GetSettingsResponse = jsonResult

export type GetSettingsError = jsonResult

export type GetStorageMyResponse = jsonResult & {
    data?: storage[];
}

export type GetStorageMyError = jsonResult

export interface PostStoreGoodsSetData {
    /**
     * Store goods payload
     */
    body: storeGoodsPayload;
}

export type PostStoreGoodsSetResponse = jsonResult

export type PostStoreGoodsSetError = jsonResult

export interface PostUserCreateData {
    /**
     * User creation payload
     */
    body: userPayload;
}

export type PostUserCreateResponse = jsonResult & {
    values?: userPayload;
}

export type PostUserCreateError = jsonResult

export type GetUserDataResponse = jsonResult & {
    data?: user;
}

export type GetUserDataError = jsonResult

export interface PostUserLoginData {
    /**
     * User login payload
     */
    body: userPayload;
}

export type PostUserLoginResponse = jsonResult

export type PostUserLoginError = unknown

export type DeleteUserLoginResponse = jsonResult

export type DeleteUserLoginError = jsonResult
