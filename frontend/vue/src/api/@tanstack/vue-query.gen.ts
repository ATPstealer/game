// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch'
import { queryOptions, type UseMutationOptions } from '@tanstack/vue-query'
import {
  client,
  postApiV2BuildingConstruct,
  getApiV2BuildingTypes,
  getSettings
} from '../services.gen'
import type {
  PostApiV2BuildingConstructData,
  PostApiV2BuildingConstructError,
  PostApiV2BuildingConstructResponse
} from '../types.gen'

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  }
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  
  return params
}

export const postApiV2BuildingConstructQueryKey = (
  options: Options<PostApiV2BuildingConstructData>
) => [createQueryKey('postApiV2BuildingConstruct', options)]

export const postApiV2BuildingConstructOptions = (
  options: Options<PostApiV2BuildingConstructData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postApiV2BuildingConstruct({
        ...options,
        ...queryKey[0],
        throwOnError: true
      })
      
      return data
    },
    queryKey: postApiV2BuildingConstructQueryKey(options)
  })
}

export const postApiV2BuildingConstructMutation = () => {
  const mutationOptions: UseMutationOptions<
    PostApiV2BuildingConstructResponse,
    PostApiV2BuildingConstructError,
    Options<PostApiV2BuildingConstructData>
  > = {
    mutationFn: async (options) => {
      const { data } = await postApiV2BuildingConstruct({
        ...options,
        throwOnError: true
      })
      
      return data
    }
  }
  
  return mutationOptions
}

export const getApiV2BuildingTypesQueryKey = (options?: Options) => [
  createQueryKey('getApiV2BuildingTypes', options)
]

export const getApiV2BuildingTypesOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getApiV2BuildingTypes({
        ...options,
        ...queryKey[0],
        throwOnError: true
      })
      
      return data
    },
    queryKey: getApiV2BuildingTypesQueryKey(options)
  })
}

export const getSettingsQueryKey = (options?: Options) => [createQueryKey('getSettings', options)]

export const getSettingsOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getSettings({
        ...options,
        ...queryKey[0],
        throwOnError: true
      })
      
      return data
    },
    queryKey: getSettingsQueryKey(options)
  })
}
