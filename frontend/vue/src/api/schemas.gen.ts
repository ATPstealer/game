// This file is auto-generated by @hey-api/openapi-ts

export const bankSchema = {
    type: 'object',
    required: ['borrowedFromState', 'borrowedLimit', 'loansAmount', 'loansAmountNewUsers', 'loansLimit'],
    properties: {
        borrowedFromState: {
            type: 'number'
        },
        borrowedLimit: {
            type: 'number'
        },
        loansAmount: {
            type: 'number'
        },
        loansAmountNewUsers: {
            type: 'number'
        },
        loansLimit: {
            type: 'number'
        }
    }
} as const;

export const blueprintSchema = {
    type: 'object',
    required: ['id', 'name', 'producedInId', 'producedResources', 'productionTime', 'usedResources'],
    properties: {
        id: {
            type: 'integer'
        },
        name: {
            type: 'string'
        },
        producedInId: {
            type: 'integer'
        },
        producedResources: {
            type: 'array',
            items: {
                '$ref': '#/definitions/resourceAmount'
            }
        },
        productionTime: {
            '$ref': '#/definitions/time.Duration'
        },
        usedResources: {
            type: 'array',
            items: {
                '$ref': '#/definitions/resourceAmount'
            }
        }
    }
} as const;

export const buildingStatusSchema = {
    type: 'string',
    enum: ['Construction', 'Ready', 'Production', 'ResourcesNeeded', 'StorageNeeded'],
    'x-enum-varnames': ['ConstructionStatus', 'ReadyStatus', 'ProductionStatus', 'ResourcesNeededStatus', 'StorageNeededStatus']
} as const;

export const buildingTypeSchema = {
    type: 'object',
    required: ['buildTime', 'buildingGroup', 'buildingSubGroup', 'capacity', 'cost', 'description', 'id', 'requirements', 'title', 'workers'],
    properties: {
        buildTime: {
            '$ref': '#/definitions/time.Duration'
        },
        buildingGroup: {
            type: 'string'
        },
        buildingSubGroup: {
            type: 'string'
        },
        capacity: {
            type: 'number'
        },
        cost: {
            type: 'number'
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'integer'
        },
        requirements: {
            type: 'string'
        },
        title: {
            type: 'string'
        },
        workers: {
            type: 'integer'
        }
    }
} as const;

export const buildingWithDataSchema = {
    type: 'object',
    required: ['_id', 'buildingType', 'hiringNeeds', 'level', 'nickName', 'onStrike', 'salary', 'square', 'squareInUse', 'status', 'typeId', 'userId', 'workers', 'x', 'y'],
    properties: {
        _id: {
            type: 'string'
        },
        bank: {
            '$ref': '#/definitions/bank'
        },
        buildingType: {
            '$ref': '#/definitions/buildingType'
        },
        equipment: {
            type: 'array',
            items: {
                '$ref': '#/definitions/equipment'
            }
        },
        equipmentEffect: {
            type: 'array',
            items: {
                '$ref': '#/definitions/equipmentEffect'
            }
        },
        goods: {
            type: 'array',
            items: {
                '$ref': '#/definitions/goods'
            }
        },
        hiringNeeds: {
            type: 'integer'
        },
        level: {
            type: 'integer'
        },
        logistics: {
            '$ref': '#/definitions/logistics'
        },
        nickName: {
            type: 'string'
        },
        onStrike: {
            type: 'boolean'
        },
        production: {
            '$ref': '#/definitions/production'
        },
        salary: {
            type: 'number'
        },
        square: {
            type: 'integer'
        },
        squareInUse: {
            type: 'number'
        },
        status: {
            '$ref': '#/definitions/buildingStatus'
        },
        typeId: {
            type: 'integer'
        },
        userId: {
            type: 'string'
        },
        workEnd: {
            type: 'string'
        },
        workStarted: {
            type: 'string'
        },
        workers: {
            type: 'integer'
        },
        x: {
            type: 'integer'
        },
        y: {
            type: 'integer'
        }
    }
} as const;

export const buyLandPayloadSchema = {
    type: 'object',
    required: ['square', 'x', 'y'],
    properties: {
        square: {
            type: 'integer'
        },
        x: {
            type: 'integer'
        },
        y: {
            type: 'integer'
        }
    }
} as const;

export const cellSchema = {
    type: 'object',
    required: ['SpendRate', '_id', 'averageSalary', 'cellName', 'crime', 'education', 'medicine', 'pollution', 'population', 'square', 'surfaceImagePath', 'x', 'y'],
    properties: {
        SpendRate: {
            type: 'number'
        },
        _id: {
            type: 'string'
        },
        averageSalary: {
            type: 'number'
        },
        cellName: {
            type: 'string'
        },
        civilSavings: {
            type: 'number'
        },
        crime: {
            type: 'number'
        },
        education: {
            type: 'number'
        },
        medicine: {
            type: 'number'
        },
        pollution: {
            type: 'number'
        },
        population: {
            type: 'number'
        },
        square: {
            type: 'integer'
        },
        surfaceImagePath: {
            type: 'string'
        },
        x: {
            type: 'integer'
        },
        y: {
            type: 'integer'
        }
    }
} as const;

export const characteristicsSchema = {
    type: 'object',
    required: ['attention', 'intelligence', 'management', 'memory', 'multitasking', 'planning', 'wits'],
    properties: {
        attention: {
            type: 'integer'
        },
        intelligence: {
            type: 'integer'
        },
        management: {
            type: 'integer'
        },
        memory: {
            type: 'integer'
        },
        multitasking: {
            type: 'integer'
        },
        planning: {
            type: 'integer'
        },
        wits: {
            type: 'integer'
        }
    }
} as const;

export const constructBuildingPayloadSchema = {
    type: 'object',
    required: ['square', 'typeId', 'x', 'y'],
    properties: {
        square: {
            type: 'integer'
        },
        typeId: {
            type: 'integer'
        },
        x: {
            type: 'integer'
        },
        y: {
            type: 'integer'
        }
    }
} as const;

export const creditTermsPayloadSchema = {
    type: 'object',
    required: ['adding', 'buildingId', 'limit', 'rate', 'rating'],
    properties: {
        adding: {
            type: 'boolean'
        },
        buildingId: {
            type: 'string'
        },
        limit: {
            type: 'number'
        },
        rate: {
            type: 'number'
        },
        rating: {
            type: 'number'
        }
    }
} as const;

export const creditTermsWithDataSchema = {
    type: 'object',
    required: ['buildingId', 'limit', 'rate', 'rating'],
    properties: {
        buildingId: {
            type: 'string'
        },
        limit: {
            type: 'number'
        },
        rate: {
            type: 'number'
        },
        rating: {
            type: 'number'
        }
    }
} as const;

export const emergencyHiringPayloadSchema = {
    type: 'object',
    required: ['buildingId'],
    properties: {
        buildingId: {
            type: 'string'
        }
    }
} as const;

export const equipmentSchema = {
    type: 'object',
    required: ['amount', 'durability', 'equipmentTypeId'],
    properties: {
        amount: {
            type: 'integer'
        },
        durability: {
            type: 'integer'
        },
        equipmentTypeId: {
            type: 'integer'
        }
    }
} as const;

export const equipmentEffectSchema = {
    type: 'object',
    required: ['blueprintId', 'effectId', 'value'],
    properties: {
        blueprintId: {
            type: 'integer'
        },
        effectId: {
            type: 'integer'
        },
        value: {
            type: 'number'
        },
        valueSecond: {
            description: 'Second value is considered as an average for all equipment, taking into account the first value.',
            type: 'number'
        }
    }
} as const;

export const equipmentTypeSchema = {
    type: 'object',
    required: ['durability', 'effectId', 'id', 'name', 'resourceTypeId', 'square', 'value', 'valueSecond'],
    properties: {
        blueprintIds: {
            type: 'array',
            items: {
                type: 'integer'
            }
        },
        durability: {
            type: 'integer'
        },
        effectId: {
            type: 'integer'
        },
        id: {
            type: 'integer'
        },
        name: {
            type: 'string'
        },
        resourceTypeId: {
            type: 'integer'
        },
        square: {
            type: 'number'
        },
        value: {
            type: 'number'
        },
        valueSecond: {
            type: 'number'
        }
    }
} as const;

export const executeOrderPayloadSchema = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        orderId: {
            type: 'string'
        }
    }
} as const;

export const findBuildingParamsSchema = {
    type: 'object',
    properties: {
        buildingTypeId: {
            type: 'integer'
        },
        id: {
            type: 'string'
        },
        limit: {
            type: 'integer'
        },
        nickName: {
            type: 'string'
        },
        order: {
            type: 'string'
        },
        orderField: {
            type: 'string'
        },
        page: {
            type: 'integer'
        },
        userId: {
            type: 'string'
        },
        x: {
            type: 'integer'
        },
        y: {
            type: 'integer'
        }
    }
} as const;

export const goodsSchema = {
    type: 'object',
    required: ['resourceTypeId'],
    properties: {
        price: {
            type: 'number'
        },
        resourceTypeId: {
            type: 'integer'
        },
        revenue: {
            type: 'number'
        },
        sellStarted: {
            type: 'string'
        },
        sellSum: {
            type: 'integer'
        },
        status: {
            '$ref': '#/definitions/storeGoodsStatus'
        }
    }
} as const;

export const hiringPayloadSchema = {
    type: 'object',
    properties: {
        buildingId: {
            type: 'string'
        },
        hiringNeeds: {
            type: 'integer'
        },
        salary: {
            type: 'number'
        }
    }
} as const;

export const installEquipmentPayloadSchema = {
    type: 'object',
    required: ['amount', 'buildingId', 'equipmentTypeId'],
    properties: {
        amount: {
            type: 'integer'
        },
        buildingId: {
            type: 'string'
        },
        equipmentTypeId: {
            type: 'integer'
        }
    }
} as const;

export const jsonResultSchema = {
    type: 'object',
    required: ['code'],
    properties: {
        code: {
            type: 'integer',
            example: 0
        },
        data: {},
        text: {
            type: 'string'
        },
        values: {}
    }
} as const;

export const landLordSchema = {
    type: 'object',
    required: ['_id', 'square', 'userId', 'x', 'y'],
    properties: {
        _id: {
            type: 'string'
        },
        square: {
            type: 'integer'
        },
        userId: {
            type: 'string'
        },
        x: {
            type: 'integer'
        },
        y: {
            type: 'integer'
        }
    }
} as const;

export const logisticPayloadSchema = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        buildingId: {
            type: 'string'
        },
        fromX: {
            type: 'integer'
        },
        fromY: {
            type: 'integer'
        },
        resourceTypeId: {
            type: 'integer'
        },
        toX: {
            type: 'integer'
        },
        toY: {
            type: 'integer'
        }
    }
} as const;

export const logisticWithDataSchema = {
    type: 'object',
    properties: {
        _id: {
            type: 'string'
        },
        amount: {
            type: 'number'
        },
        fromX: {
            type: 'integer'
        },
        fromY: {
            type: 'integer'
        },
        resourceType: {
            '$ref': '#/definitions/resourceType'
        },
        resourceTypeId: {
            type: 'integer'
        },
        toX: {
            type: 'integer'
        },
        toY: {
            type: 'integer'
        },
        userId: {
            type: 'string'
        },
        workEnd: {
            type: 'string'
        }
    }
} as const;

export const logisticsSchema = {
    type: 'object',
    required: ['capacity', 'capacityMax', 'price', 'revenue', 'speed'],
    properties: {
        capacity: {
            type: 'number'
        },
        capacityMax: {
            type: 'number'
        },
        price: {
            type: 'number'
        },
        revenue: {
            type: 'number'
        },
        speed: {
            type: 'number'
        }
    }
} as const;

export const logisticsPriceParamsSchema = {
    type: 'object',
    properties: {
        buildingId: {
            type: 'string'
        },
        price: {
            type: 'number'
        }
    }
} as const;

export const logisticsWithDataSchema = {
    type: 'object',
    required: ['buildingId', 'capacity', 'price', 'speed', 'x', 'y'],
    properties: {
        buildingId: {
            type: 'string'
        },
        capacity: {
            type: 'number'
        },
        price: {
            type: 'number'
        },
        speed: {
            type: 'number'
        },
        x: {
            type: 'integer'
        },
        y: {
            type: 'integer'
        }
    }
} as const;

export const orderSchema = {
    type: 'object',
    required: ['_id', 'amount', 'priceForUnit', 'resourceTypeId', 'sell', 'userId', 'x', 'y'],
    properties: {
        _id: {
            type: 'string'
        },
        amount: {
            type: 'number'
        },
        priceForUnit: {
            type: 'number'
        },
        resourceTypeId: {
            type: 'integer'
        },
        sell: {
            description: 'true - sell; false - buy',
            type: 'boolean'
        },
        userId: {
            type: 'string'
        },
        x: {
            type: 'integer'
        },
        y: {
            type: 'integer'
        }
    }
} as const;

export const orderWithDataSchema = {
    type: 'object',
    required: ['_id', 'amount', 'nickName', 'priceForUnit', 'resourceType', 'resourceTypeId', 'sell', 'userId', 'x', 'y'],
    properties: {
        _id: {
            type: 'string'
        },
        amount: {
            type: 'number'
        },
        nickName: {
            type: 'string'
        },
        priceForUnit: {
            type: 'number'
        },
        resourceType: {
            '$ref': '#/definitions/resourceType'
        },
        resourceTypeId: {
            type: 'integer'
        },
        sell: {
            description: 'true - sell; false - buy',
            type: 'boolean'
        },
        userId: {
            type: 'string'
        },
        x: {
            type: 'integer'
        },
        y: {
            type: 'integer'
        }
    }
} as const;

export const productionSchema = {
    type: 'object',
    required: ['blueprintId'],
    properties: {
        blueprintId: {
            type: 'integer'
        }
    }
} as const;

export const repayLoanPayloadSchema = {
    type: 'object',
    required: ['amount', 'loanId'],
    properties: {
        amount: {
            type: 'number'
        },
        loanId: {
            type: 'string'
        }
    }
} as const;

export const resourceAmountSchema = {
    type: 'object',
    properties: {
        amount: {
            type: 'number'
        },
        resourceId: {
            type: 'integer'
        }
    }
} as const;

export const resourceAsEquipmentSchema = {
    type: 'object',
    required: ['_id', 'amount', 'equipmentType', 'resourceType', 'resourceTypeId', 'userId', 'x', 'y'],
    properties: {
        _id: {
            type: 'string'
        },
        amount: {
            type: 'number'
        },
        equipmentType: {
            '$ref': '#/definitions/equipmentType'
        },
        resourceType: {
            '$ref': '#/definitions/resourceType'
        },
        resourceTypeId: {
            type: 'integer'
        },
        userId: {
            type: 'string'
        },
        x: {
            type: 'integer'
        },
        y: {
            type: 'integer'
        }
    }
} as const;

export const resourceTypeSchema = {
    type: 'object',
    required: ['demand', 'id', 'name', 'storeGroup', 'volume', 'weight'],
    properties: {
        demand: {
            type: 'number'
        },
        id: {
            type: 'integer'
        },
        name: {
            type: 'string'
        },
        storeGroup: {
            type: 'string'
        },
        volume: {
            description: 'm3',
            type: 'number'
        },
        weight: {
            description: 'kg',
            type: 'number'
        }
    }
} as const;

export const resourceWithDataSchema = {
    type: 'object',
    required: ['_id', 'amount', 'resourceType', 'resourceTypeId', 'userId', 'x', 'y'],
    properties: {
        _id: {
            type: 'string'
        },
        amount: {
            type: 'number'
        },
        resourceType: {
            '$ref': '#/definitions/resourceType'
        },
        resourceTypeId: {
            type: 'integer'
        },
        userId: {
            type: 'string'
        },
        x: {
            type: 'integer'
        },
        y: {
            type: 'integer'
        }
    }
} as const;

export const startProductionPayloadSchema = {
    type: 'object',
    required: ['blueprintId', 'buildingId', 'duration'],
    properties: {
        blueprintId: {
            type: 'integer'
        },
        buildingId: {
            type: 'string'
        },
        duration: {
            '$ref': '#/definitions/time.Duration'
        }
    }
} as const;

export const storageSchema = {
    type: 'object',
    required: ['_id', 'userId', 'volumeMax', 'volumeOccupied', 'x', 'y'],
    properties: {
        _id: {
            type: 'string'
        },
        userId: {
            type: 'string'
        },
        volumeMax: {
            type: 'number'
        },
        volumeOccupied: {
            type: 'number'
        },
        x: {
            type: 'integer'
        },
        y: {
            type: 'integer'
        }
    }
} as const;

export const storeGoodsPayloadSchema = {
    type: 'object',
    required: ['buildingId', 'price', 'resourceTypeId'],
    properties: {
        buildingId: {
            type: 'string'
        },
        price: {
            type: 'number'
        },
        resourceTypeId: {
            type: 'integer'
        }
    }
} as const;

export const storeGoodsStatusSchema = {
    type: 'string',
    enum: ['Selling', 'DemandSatisfied', 'HighPrice', 'NotEnoughMinerals', 'SpendingLimitReached', 'CapacityReached', 'OnStrike'],
    'x-enum-varnames': ['Selling', 'DemandSatisfied', 'HighPrice', 'NotEnoughMinerals', 'SpendingLimitReached', 'CapacityReached', 'OnStrike']
} as const;

export const takeCreditPayloadSchema = {
    type: 'object',
    required: ['amount', 'buildingId', 'rate', 'rating'],
    properties: {
        amount: {
            type: 'number'
        },
        buildingId: {
            type: 'string'
        },
        rate: {
            type: 'number'
        },
        rating: {
            type: 'number'
        }
    }
} as const;

export const takeStateCreditPayloadSchema = {
    type: 'object',
    required: ['amount', 'buildingId'],
    properties: {
        amount: {
            type: 'number'
        },
        buildingId: {
            type: 'string'
        }
    }
} as const;

export const time_DurationSchema = {
    type: 'integer',
    enum: [-9223372036854776000, 9223372036854776000, 1, 1000, 1000000, 1000000000, 60000000000, 3600000000000],
    'x-enum-varnames': ['minDuration', 'maxDuration', 'Nanosecond', 'Microsecond', 'Millisecond', 'Second', 'Minute', 'Hour']
} as const;

export const userSchema = {
    type: 'object',
    required: ['_id', 'email', 'nickName', 'password'],
    properties: {
        _id: {
            type: 'string'
        },
        characteristics: {
            '$ref': '#/definitions/characteristics'
        },
        created: {
            type: 'string'
        },
        creditRating: {
            type: 'number'
        },
        email: {
            type: 'string'
        },
        money: {
            type: 'number'
        },
        nickName: {
            type: 'string'
        },
        password: {
            type: 'string'
        }
    }
} as const;

export const userPayloadSchema = {
    type: 'object',
    required: ['email', 'nickName', 'password', 'ttl'],
    properties: {
        email: {
            type: 'string'
        },
        nickName: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        ttl: {
            type: 'integer'
        }
    }
} as const;